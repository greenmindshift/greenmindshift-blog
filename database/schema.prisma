// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(AUTHOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  articles Article[]
  comments Comment[]

  @@map("users")
}

model Article {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  content     String
  excerpt     String?
  featuredImage String?
  status      ArticleStatus @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // SEO Fields
  seoTitle       String?
  seoDescription String?
  
  // AI Generation
  aiGenerated    Boolean @default(false)
  trendsData     Json?   // Google Trends data
  sourceHash     String? // Hash des ursprünglichen Trends für Duplikatserkennung
  
  // Relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  categories ArticleCategory[]
  tags       ArticleTag[]
  comments   Comment[]

  @@map("articles")
}

model Category {
  id          String @id @default(cuid())
  name        String
  slug        String @unique
  description String?
  color       String? // Hex color code
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  articles ArticleCategory[]

  @@map("categories")
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  articles ArticleTag[]

  @@map("tags")
}

model ArticleCategory {
  articleId  String
  categoryId String

  article  Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([articleId, categoryId])
  @@map("article_categories")
}

model ArticleTag {
  articleId String
  tagId     String

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
  @@map("article_tags")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorName String?
  authorEmail String?
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("comments")
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("newsletter_subscribers")
}

model TrendsKeyword {
  id          String   @id @default(cuid())
  keyword     String   @unique
  active      Boolean  @default(true)
  lastChecked DateTime?
  trendsData  Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("trends_keywords")
}

// Neue Tabelle für Trends-Tracking
model ProcessedTrend {
  id            String   @id @default(cuid())
  trendHash     String   @unique // MD5/SHA256 Hash des Trend-Inhalts
  query         String   // Der ursprüngliche Suchbegriff
  traffic       String?  // Traffic-Information
  date          String   // Datum des Trends
  processed     Boolean  @default(false)
  articleCreated Boolean @default(false)
  articleId     String?  // Referenz zum erstellten Artikel
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Zusätzliche Metadaten
  sourceData    Json?    // Komplette Trends-Daten
  reason        String?  // Grund warum nicht verarbeitet (falls processed=false)

  @@index([trendHash])
  @@index([query])
  @@index([date])
  @@map("processed_trends")
}

// Tabelle für Content-Hashes zur erweiterten Duplikatserkennung
model ContentHash {
  id          String   @id @default(cuid())
  contentHash String   @unique // Hash des generierten Contents
  title       String   // Titel für einfache Identifikation
  source      String   // "google_trends", "manual", etc.
  createdAt   DateTime @default(now())
  
  @@index([contentHash])
  @@map("content_hashes")
}

// Blacklist für bestimmte Keywords/Trends
model TrendBlacklist {
  id        String   @id @default(cuid())
  keyword   String   @unique
  reason    String?  // Grund für Blacklisting
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("trend_blacklist")
}

enum Role {
  ADMIN
  EDITOR
  AUTHOR
}

enum ArticleStatus {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
} 